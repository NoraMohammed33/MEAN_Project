{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthorService {\n  constructor(http) {\n    this.http = http;\n  }\n  getAuthors() {\n    return this.http.get('http://localhost:5000/author', {\n      headers: new HttpHeaders().set('Authorization', 'secret token')\n    });\n  }\n  getAuthorById(id) {\n    return this.http.get('http://localhost:5000/author/' + id, {\n      headers: new HttpHeaders().set('Authorization', 'secret token')\n    });\n  }\n}\nAuthorService.ɵfac = function AuthorService_Factory(t) {\n  return new (t || AuthorService)(i0.ɵɵinject(i1.HttpClient));\n};\nAuthorService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthorService,\n  factory: AuthorService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,SAAqBA,WAAW,QAAQ,sBAAsB;;;AAK9D,OAAM,MAAOC,aAAa;EAExBC,YAAoBC,IAAe;IAAf,SAAI,GAAJA,IAAI;EAAe;EACvCC,UAAU;IACR,OAAO,IAAI,CAACD,IAAI,CAACE,GAAG,CAAQ,8BAA8B,EAAC;MAACC,OAAO,EAAE,IAAIN,WAAW,EAAE,CAACO,GAAG,CAAC,eAAe,EAAE,cAAc;IAAC,CAAC,CAAC;EAC/H;EACAC,aAAa,CAACC,EAAM;IAClB,OAAO,IAAI,CAACN,IAAI,CAACE,GAAG,CAAQ,+BAA+B,GAACI,EAAE,EAAC;MAACH,OAAO,EAAE,IAAIN,WAAW,EAAE,CAACO,GAAG,CAAC,eAAe,EAAE,cAAc;IAAC,CAAC,CAAC;EACnI;;AARWN,aAAa;mBAAbA,aAAa;AAAA;AAAbA,aAAa;SAAbA,aAAa;EAAAS,SAAbT,aAAa;EAAAU,YAFZ;AAAM","names":["HttpHeaders","AuthorService","constructor","http","getAuthors","get","headers","set","getAuthorById","id","factory","providedIn"],"sourceRoot":"","sources":["/home/modghar/Project/MEAN_Project/Frontend/src/app/services/author.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthorService {\n\n  constructor(private http:HttpClient) { }\n  getAuthors():Observable<any[]>{\n    return this.http.get<any[]>('http://localhost:5000/author',{headers: new HttpHeaders().set('Authorization', 'secret token')})\n  }\n  getAuthorById(id:any):Observable<any[]>{\n    return this.http.get<any[]>('http://localhost:5000/author/'+id,{headers: new HttpHeaders().set('Authorization', 'secret token')})\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}